debug constant - bool debug. turn on (true) or off (false) to output debug comments

State machine
set rules for states
bool get_token(char* block, 2d array table, int &pos, string &token, start_state)
     return true; 

get_token
	- return true if a token was found, false otherwise
	- pos will point to the next char to be processed if returning true
	- pos will be unchanged if returning false
	- if a succcess state was encountered while transitioning from state-to-state, determining pos and token
	- purpose: return true if a token was found that was accepted by the machine starting at given state
answers question: are you able to find a token that is accepted by this starting at this position


cout << ch ' ' << state;
token<-ch

if(success)
save token
save pos


testing:
no token
one token
more

get_token
std::string token_string;
if(s.get_token(STATE_ALPHA, token_string))
t = Token(token_string, STATE_ALPHA);
}
else { t = Token(); s._pos++;}


#include <iostream>
#include <cstring>
//#include "token.h"
//#include "state_machine_functions.h"
//#include "stokenizer.h"

using namespace std;
const int MAX_ROWS = 30;
const int MAX_COLUMNS = 256;
const int SIZE = 100;

bool get_token(char block[], int _table[][MAX_COLUMNS], int &pos, string &token, int start_state);
void print_table(int table[][MAX_COLUMNS]);
int main()
{
    char cSentence[SIZE];
    string sentence = "3.14";
    strcpy(cSentence, sentence.c_str());
    int n = 0;

    int table[MAX_ROWS][MAX_COLUMNS];

    for(unsigned int i = 0; i < MAX_ROWS; i++)
    {
        for(unsigned int j = 0; j < MAX_COLUMNS; j++)
        {
            table[i][j] = -1;
        }
    }

    table[0][0] = 0;
    table[1][0] = 1;
    table[2][0] = 0;
    table[3][0] = 1;

    for(unsigned int i = '0'; i <= '9'; i++)
    {
        table[0][i] = 1;
        table[1][i] = 1;
        table[2][i] = 3;
        table[3][i] = 3;
    }

    table[0]['.'] = 2;
    table[1]['.'] = 2;

//    print_table(table);

    get_token(cSentence, table, n, sentence, 0);

    return 0;
}

void print_table(int table[][MAX_COLUMNS])
{
    for(unsigned int i = 0; i < MAX_ROWS; i++)
    {
        for(unsigned int j = 0; j < MAX_COLUMNS; j++)
        {
            cout << table[i][j] << " ";
        }
        cout << endl;
    }
}
bool get_token(char block[], int _table[][MAX_COLUMNS], int &pos, string &token, int start_state)
{
    if(start_state != -1)
    {
        char ch;
        while(block[pos] != '\0')
        {

            ch = block[pos];
            cout << "Char: " << ch << ' ' << _table[start_state][ch] << endl;
            token = token + ch;

            pos++;
            start_state++;
        }

        return true;

    }

    return false;

}
